Statless Functional components 
    
    //JaveScript Functions example 
        function Welcom(props){
            return <h1>Hello, {props.name}</h1>;
        }

Statful Class components
    //Class extending Components class
    //Render method returning HTML
        class Welcome extends React.Component{
            render(){
                return <h1>Hello, {this.props.name}</h1>
            }
        }

        App.js is a class componet

arrow Functions

function Greet(){
    return <h1>Hello<h1/>
}
//same
const Greet = () => {
    <h1>Hello<h1/>
}


functional component
//Greet.js
    import Recat from 'react'

    const Greet(){
            return <h1>Class Component</h1>
    }
    export default Greet

class component
//Welcome.js
    import Recat, {Component} from 'react'

    class Welcome extends Component{
        render(){
            return <h1>Class Component</h1>
        }
    }
    export default Welcome

which to use?class or function?

    functionl:
        -simple Functions
        -absence of 'this' keyword
        solution without using State
        -mainly responsible for UI
        -Statless/ dumb/ presentational(unless using hooks)
        -use these as much as possible?

    class:
        -feature rich
        -maintain their own private data (hold state)
        -Complex UI logic
        -Provide lifecycle hooks
        -Statful /smart/ container

JSX
    -JSXtags
        -(has)tag name, attribute,and children
    Class-> className //depends on version though might be class in future
    for -> htmlFor

    camelCase propertynameing convention 
        -onclick -> onclick
        -tabindext ->tabindext


14-26
28
38-43    
========================================================================================
Props vs State

props:
    props get passedto the component
    function parameters
    props are immutable
    props- functional components
    this.props - class componet

state:
    stateis managed within the componet
    variable declared in the function body
    state can be changed
    useState Hook-functional Components
    this.state -class components
======================================================================================
setState:
    -always make use of setState and never modify the state directly
    
    -code has tobe excuted after the state has been updated ? place that code in the call back
    function which is the second argument to the setState method
    
    -when you have to update state based on the previous state value, pass in a function as an
    argument instead of the regual object
====================================================================================
Destructuring:
    in classes:
        inside render method:
            -const {state1, state2, ...} = this.state
            -const {name, lastname} = this.props

    in functional components:
        before return statment
            -const {name, lastname} = this.props
============================================================================
react life cycle methods 16.4+

Mounting: 
    called:
        -When an instance of a component is being created and inserted into the dom
    methods:
        -constructor
        -static getDerivedStateFromProps
        -shouldComponentUpdate,
        -render 
Updating:
    called:
        -When a component is being re-rendered as a result of changes to either its props
    methods:
        -static getDerivedStateFromProps
        -shouldComponentUpdate
        -render
        -getSnapshotBeforeUpdate
        -componentDidUpdate
unmounting:
    called:
        -When a component is being removed from the dom
    methods:
        -componentWillUnmount

Error Handling: 
    called:
        -when there is an error during rendering, in the lifecycle method, 
        or in the constructor of and child component
    methods:
        -static getDerivedStateFromError
        -componentDidCatch
==============================================================================

Mounting Lifecycle methods

constructor(props) is a special function that will get called whenever a new componet is created
    what is constuctor used for?
        -initializing state or Binding the event handlers
    We should not not casuse side effects 
        -example: never make an http request within the constructor
    we need to call super(props) 
        -which will call the baseline constructor
        - it will directly overwrite this.state
        -this.props only works if you pass in props as the argument 

static getDerivedStateFromProps(props, state)
    -when the state of the component depends on changes in props over time
    -set the state
    -you should no not case side effects

render(): only required method
    -read props and state and return JSX
    -should not change state or iteract with DOM or make AJAX calls
    -children components lifecycle methods are also excucted 

 componentDidMount()
    -invoked immediatly after component and all its childen components have been rendeered to the DOM
    -perfect for cause side effects: EX interact with DOM or perform and AJAX callsto load data
==================================================================================
React.Fragment




Context:
    1-Creat the Context (creatContext())
    2-Provide a context value
    3-Consume the context value

    step1:
        -look at userContext.js
    step2:
        -at the top level include the provider component 
            -provide a value (value="jonathan")
            -that value can now be consumed in any decentent components

        -in app.js
            -wrap ComponentC in UserProvider
                <UserProvider value="Jonathan">
                    <ComponentC/>
                </UserProvider>
    step3: 
        -we are going to consume componentF
        -in componentF in return statement add <UserConsumer>
        -inbetween the UserComponent we need to specify a function
        {(username)=> {
            <div>Hello {username}</div>
        }}
        -what are we doing here?
            we are passing function as a child to the consumerComponent
            the consumer component tell componentF, "hey, you need user name... right? Let me provide it to you :)"
            what you want to do with the name is up to use
            make sure to return proper JSX
            componentF will consume the username 

        

//=======================================================================
Rules for hooks

Only call hooks ar the top leveldont call hooks inside loops, conditions or nested Functions

only call hooks from react Function
call them from within react functional components and not just any regular Javascript function

=============================================================================
useState hooks

-The useState hooks lets you add state to functional components (creating a single state)

-in classes, the state is always an object

-with the useState hook, the state doesnt have to be an object

-the useSate hook returns an array with 2 elements

the first element is the current value of the state, and the second element is a state setter function

 if new state value depends on the previous state value, You can pass a function to either setter function(recieve previous sae as argument)

when dealing with objects or arrays, always make sure to spread your state variable and then call the setter function to get expected behavior
================================================================================
useEffects Hook

updating the document title to the curent counter value you would need to 

    //initial render.... excucted once
    componentDidMount(){
        document.title = 'you cicked ${this.state.count} times';
    }
    //we have a button that changed value... so we need this life cycle
    componentDidUpdate(){
        document.title = 'you cicked ${this.state.count} times';
    }

    what about a timer?

        componentDidMount(){
            this.interval = setInterval(this.tick, 1000);
        }
     
        componentDidUpdate(){
            
        }

        componentWillUnmount(){
            clearInterval(this.interval);
        }

could this be better?
we are writing the same code in some of the lifecyle methods
=====================================================================

useReducer:

    useReducer(reducerFunction, initialState)
    newState = reducer(currentState, action)
    useReducer returns a pair of values. [newState, dispatch]

    useReducer is a hook that is used for state management in React
    useReducer is related to reducer Functions
    usereducer(reducer, initialState)
    reducer(currentState, action)

    ====================================================================
    useState vs useReducer

    senario              useState                 UserReducer
-----------------------------------------------------------
Type ofstate        Number, String, Boolean     Object or array

number of 
state transitions   one or two                  too many 

related state
transitions         no                          Yes

business logic      no bussiness logic          complex business logic

local vs Global     local                       global
========================================================================

learn about useImperitivehandle
uselayouteffect
usedebugvalue

HOC pattern render props pattern