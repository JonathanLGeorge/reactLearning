flexbox:
	justify-content: flex-start

crossbow {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
}
justify-content: flex-end;
justify-content: center;
justify-content: flex-start
justify-content: space-between; [X--X--X]
justify-content: space-around;	[-X-X-X-]

flex-direction: row;
flex-direction: column; -reverse

alignment:

align-items: flex-start; //starts at top(row) or to the right(column)
align-items: flex-end; // at bottom(row) or to the left(column)
align-items: stretch; // will stretch the items top to bottom(row), or  right to left(column)
align-items: center;

align-self
align-items

crossbow {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

.target:nth-of-type(2){		[---X-]
  align-self: flex-start; 	[--X-X]
}

crossbow { 
  display: flex;
  flex-direction: row-reverse;
  justify-content: flex-end;
  align-items: flex-end;
}
.target:nth-of-type(3){
  align-self: flex-start;

flex-grow: #
flex-shrink: 1; //these are ratios not values. so 1xgrowth
flex-basis:#px //will make width ignored

flex-basis respecs min-width as a lower limit

That flex-basis is a starting point, 
an ideal or hypothetical size of things 
before any growing or shrinking happens.
When shooting horizontally flex-basis deals with width. 
When shooting vertically it controlsheight.

 If there's not enough space then they'll have to shrink
according to their flex-shrink ratios. And if there's extra space available
they can expand to fill it according to their flex-grow ratios if they have any.

The final flex-basis can't be higher than its max-width
(or max-height when shooting vertically). If itis higher,
the final flex-basis just becomes that max value.

The final flex-basis also can't be lower than its min-width
(or min-height when shooting gvertically). If it
is lower, the final flex-basis just becomes that min value.

It defaults to flex-basis: auto, which means to
fallback to the width (or the height when shooting vertically).

flex-shrink: 0 //means you wont shrink passed flex-basis size
===============================================================
order: #;
flex-wrap: wrap; //flex-wrap:nowrap; is the default
flex-wrap: wrap-reverse;
===============================================================
lines stretch by default, so leaving
align-content setting off is the same
as setting it to:

align-content: stretch;

align-content setting is a lot like align-items
except it controls the wrapped lines rather
than the individual items in those lines.
===============================================================
flex: It's a shortcut for three other settings:
    flex-grow, flex-shrink, and flex-basis, in that order.

    flex: 1 1 300px //flex-basis will default to 0px if not specified:
    flex: 1 0 auto //need to set to auto if you want to use its auto value

flex shrink will default to 1
    flex: 0 300px = flex: 0 1 300px

    flex: 1 = flex: 1 1 0px

flex: auto = flex-grow: 1, flex-shrink: 1, and flex-basis: auto
flex: none = flex-grow: 0, flex-shrink: 0, and flex-basis: auto

flex: none; =  says listen item: don't grow,
don't shrink, and just use your width as your basis.

flex-flow: column wrap = flex-direction: column, and flex-wrap: wrap