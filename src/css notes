flexbox:
	justify-content: flex-start

crossbow {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
}
justify-content: flex-end;
justify-content: center;
justify-content: flex-start
justify-content: space-between; [X--X--X]
justify-content: space-around;	[-X-X-X-]

flex-direction: row;
flex-direction: column; -reverse

alignment:

align-items: flex-start; //starts at top(row) or to the right(column)
align-items: flex-end; // at bottom(row) or to the left(column)
align-items: stretch; // will stretch the items top to bottom(row), or  right to left(column)
align-items: center;

align-self
align-items

crossbow {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}

.target:nth-of-type(2){		[---X-]
  align-self: flex-start; 	[--X-X]
}

crossbow { 
  display: flex;
  flex-direction: row-reverse;
  justify-content: flex-end;
  align-items: flex-end;
}
.target:nth-of-type(3){
  align-self: flex-start;

flex-grow: #
flex-shrink: 1; //these are ratios not values. so 1xgrowth
flex-basis:#px //will make width ignored

flex-basis respecs min-width as a lower limit

That flex-basis is a starting point, 
an ideal or hypothetical size of things 
before any growing or shrinking happens.
When shooting horizontally flex-basis deals with width. 
When shooting vertically it controlsheight.

 If there's not enough space then they'll have to shrink
according to their flex-shrink ratios. And if there's extra space available
they can expand to fill it according to their flex-grow ratios if they have any.

The final flex-basis can't be higher than its max-width
(or max-height when shooting vertically). If itis higher,
the final flex-basis just becomes that max value.

The final flex-basis also can't be lower than its min-width
(or min-height when shooting gvertically). If it
is lower, the final flex-basis just becomes that min value.

It defaults to flex-basis: auto, which means to
fallback to the width (or the height when shooting vertically).